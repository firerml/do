{"version":3,"sources":["redux/actions.ts","types.ts","components/button.tsx","components/card.tsx","utils.ts","components/task-card.tsx","components/task-list.tsx","components/task-form.tsx","components/modal.tsx","components/task-modal.tsx","components/task-board.tsx","app.tsx","redux/reducers.ts","redux/index.ts","index.tsx"],"names":["createSimpleActionCreator","type","payload","createStandardAction","TaskStatus","createOrUpdateTask","deleteTask","showCreateModal","showEditModal","closeModal","actionTypes","actions","setTaskStatus","task","status","Object","objectSpread","completed","Button","_ref","label","color","action","react_default","a","createElement","className","concat","aria-label","onClick","Card","title","children","buttons","_ref$className","keyHandler","e","which","tabIndex","undefined","onKeyPress","makeEmptyTask","description","arguments","length","IN_PROGRESS","due","Date","isNew","id","isComplete","COMPLETED","formatDate","date","toLocaleDateString","TaskCardButtons","BACKLOG","button_Button","Fragment","TaskCardDate","_ref2","TaskCard","_ref3","task_card_TaskCardButtons","card_Card","task_card_TaskCardDate","TaskList","tasks","map","task_card_TaskCard","TaskForm","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","form","submit","_this$props","props","valueAsDate","_title","value","getUTCFullYear","getUTCMonth","getUTCDate","inherits","createClass","key","_this$props2","_this2","_this$props3","ref","onSubmit","event","preventDefault","name","placeholder","defaultValue","required","toISOString","substr","renderButtonBar","React","Component","Modal","open","TaskModal","modal_Modal","task_form_TaskForm","CompletedList","task_list_TaskList","filter","InProgressList","BacklogList","App","connect","state","values","val","showModal","modalVisible","editingTask","editTask","dispatch","bindActionCreators","_ref4","task_board_BacklogList","task_board_InProgressList","task_board_CompletedList","task_modal_TaskModal","defaultState","nextTaskId","reducer","_wrapSimpleReducers","defineProperty","finalTask","taskId","store","createStore","ReactDOM","render","es","document","getElementById"],"mappings":"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","file":"static/js/main.61cf1892.chunk.js","sourcesContent":["import { StandardAction, SimpleActionCreator } from './types';\nimport { Task, TaskId, TaskStatus } from '../types';\n\nfunction createStandardAction<Type extends string, Payload>(\n  type: Type,\n  payload: Payload\n): StandardAction<Type, Payload> {\n  return {\n    type,\n    payload,\n  } as StandardAction<Type, Payload>;\n}\n\nfunction createSimpleActionCreator<Type extends string, Payload>(\n  type: Type\n): SimpleActionCreator<Type, Payload> {\n  return ((payload: Payload) =>\n    createStandardAction(type, payload)) as SimpleActionCreator<Type, Payload>;\n}\n\nconst CreateOrUpdateTask = 'CreateOrUpdateTask';\nconst createOrUpdateTask = createSimpleActionCreator<\n  typeof CreateOrUpdateTask,\n  Task\n>(CreateOrUpdateTask);\n\nconst DeleteTask = 'DeleteTask';\nconst deleteTask = createSimpleActionCreator<typeof DeleteTask, TaskId>(\n  DeleteTask\n);\n\nconst ShowCreateModal = 'ShowCreateModal';\nconst showCreateModal = createSimpleActionCreator<\n  typeof ShowCreateModal,\n  TaskStatus\n>(ShowCreateModal);\n\nconst ShowEditModal = 'ShowEditModal';\nconst showEditModal = createSimpleActionCreator<typeof ShowEditModal, null>(\n  ShowEditModal\n);\n\nconst CloseModal = 'CloseModal';\nconst closeModal = createSimpleActionCreator<\n  typeof CloseModal,\n  null\n>(CloseModal);\n\nconst setTaskStatus = (task: Task, status: TaskStatus) => createOrUpdateTask({\n  ...task,\n  status,\n  completed: null,\n})\n\nexport const actionTypes = {\n  CreateOrUpdateTask,\n  DeleteTask,\n  ShowCreateModal,\n  ShowEditModal,\n  CloseModal,\n};\n\nexport const actions = {\n  createOrUpdateTask,\n  deleteTask,\n  showCreateModal,\n  showEditModal,\n  closeModal,\n  setTaskStatus,\n};\n","import { number } from \"prop-types\";\n\nexport enum TaskStatus {\n  BACKLOG,\n  IN_PROGRESS,\n  COMPLETED,\n}\n\nexport type TaskId = number;\n\nexport type Task = {\n  readonly id?: TaskId;\n  readonly title: string;\n  readonly status: TaskStatus;\n  readonly description: string;\n  readonly due: Date;\n  readonly completed: Date | null;\n};\n","import React from 'react';\n\nimport \"./button.css\";\n\nexport type ButtonProps = {\n  label: string;\n  color: 'purple' | 'blue' | 'green' | 'red' | 'white';\n  action: () => void;\n};\n\nexport const Button: React.SFC<ButtonProps> = ({ label, color, action }) => (\n  <button\n    className={`button button-${color}`}\n    aria-label={label}\n    onClick={action}\n    type=\"button\"\n  >\n    {label}\n  </button>\n);\n","import React from 'react';\nimport './card.css';\n\nexport type CardProps = {\n  title: string;\n  className?: string;\n  buttons?: React.ReactNode;\n  onClick?: () => void;\n};\n\nexport const Card: React.SFC<CardProps> = ({\n  title,\n  children,\n  buttons,\n  onClick,\n  className = '',\n}) => {\n  const keyHandler = (e: React.KeyboardEvent) => {\n    if (onClick && e.which === 13) {\n      onClick();\n    }\n  };\n\n  return (\n    <div className={`card ${className}`}>\n      <h2\n        tabIndex={onClick ? 1 : undefined}\n        className=\"card__title\"\n        onClick={onClick}\n        onKeyPress={keyHandler}\n      >\n        {title}\n      </h2>\n      <div\n        tabIndex={onClick ? 1 : undefined}\n        className=\"card__body\"\n        onClick={onClick}\n        onKeyPress={keyHandler}\n      >\n        {children}\n      </div>\n      <div className=\"card__button-bar\">{buttons}</div>\n    </div>\n  );\n};\n","import { Task, TaskStatus } from './types';\n\nexport const makeEmptyTask = (\n  status: TaskStatus = TaskStatus.IN_PROGRESS\n): Task => ({\n  title: '',\n  description: '',\n  status: status,\n  due: new Date(),\n  completed: null,\n});\n\nexport const isNew = (task: Task) => task.id === undefined;\nexport const isComplete = (task: Task) => task.status === TaskStatus.COMPLETED;\n\nexport const formatDate = (date: Date) => date.toLocaleDateString();\n","import React from 'react';\nimport { Task, TaskStatus } from '../types';\nimport { Button } from './button';\nimport { Card } from './card';\n\nimport './task-card.css';\nimport { TaskBoardActions } from './task-board';\nimport { isComplete, formatDate } from '../utils';\n\nexport type TaskCardProps = {\n  task: Task;\n  actions: TaskBoardActions;\n};\n\nconst TaskCardButtons: React.SFC<TaskCardProps> = ({ task, actions }) => {\n  switch (task.status) {\n    case TaskStatus.BACKLOG:\n      return (\n        <Button\n          label=\"Start\"\n          color=\"purple\"\n          action={() => {\n            actions.setTaskStatus(task, TaskStatus.IN_PROGRESS);\n          }}\n        />\n      );\n    case TaskStatus.IN_PROGRESS:\n      return (\n        <React.Fragment>\n          <Button\n            label=\"Backlog\"\n            color=\"blue\"\n            action={() => {\n              actions.setTaskStatus(task, TaskStatus.BACKLOG);\n            }}\n          />\n          <Button\n            label=\"Complete\"\n            color=\"green\"\n            action={() => {\n              actions.setTaskStatus(task, TaskStatus.COMPLETED);\n            }}\n          />\n        </React.Fragment>\n      );\n    case TaskStatus.COMPLETED:\n      return (\n        <Button\n          label=\"Undo\"\n          color=\"blue\"\n          action={() => {\n            actions.setTaskStatus(task, TaskStatus.IN_PROGRESS);\n          }}\n        />\n      );\n  }\n};\n\nconst TaskCardDate: React.SFC<TaskCardProps> = ({ task }) => {\n  if (isComplete(task)) {\n    return (\n      <span className=\"task-card__date completed\">\n        Completed {formatDate(task.completed)}\n      </span>\n    );\n  } else {\n    return (\n      <span className=\"task-card__date\">Due {formatDate(task.due)}</span>\n    );\n  }\n};\n\nexport const TaskCard: React.SFC<TaskCardProps> = ({ task, actions }) => {\n  const buttons = <TaskCardButtons task={task} actions={actions} />;\n  const className = `task-card ${isComplete(task) ? 'completed' : ''}`;\n\n  return (\n    <Card onClick={() => {\n      actions.showEditModal(task);\n    }}title={task.title} buttons={buttons} className={className}>\n      <p>{task.description}</p>\n      <TaskCardDate task={task} actions={actions} />\n    </Card>\n  );\n};\n","import React from 'react';\n\nimport { Task } from '../types';\nimport { TaskCard } from './task-card';\nimport { Card } from './card';\n\nimport './task-list.css';\nimport { TaskBoardActions } from './task-board';\n\nexport type TaskListProps = {\n  title: string;\n  tasks: Task[];\n  actions: TaskBoardActions;\n};\n\nexport const TaskList: React.SFC<TaskListProps> = ({\n  title,\n  tasks,\n  actions,\n  children,\n}) => (\n  <Card title={title} buttons={children} className=\"task-list\">\n    {tasks.map(task => (\n      <TaskCard actions={actions} task={task} />\n    ))}\n  </Card>\n);\n","import React from 'react';\n\nimport { Button } from './button';\nimport { Task } from '../types';\n\nimport './task-form.css';\nimport { TaskBoardActions } from './task-board';\nimport { isNew, formatDate } from '../utils';\n\nexport type TaskFormProps = {\n  task: Task;\n  actions: TaskBoardActions;\n};\n\nexport class TaskForm extends React.Component<TaskFormProps> {\n  private form: HTMLFormElement;\n\n  submit = () => {\n    const { actions, task } = this.props;\n    const due: Date = this.form.due.valueAsDate;\n\n    actions.createOrUpdateTask({\n      ...task,\n      title: this.form._title.value,\n      description: this.form.description.value,\n      due: new Date(due.getUTCFullYear(), due.getUTCMonth(), due.getUTCDate()),\n    });\n    actions.closeModal();\n  };\n\n  renderButtonBar() {\n    const { task, actions } = this.props;\n\n    return (\n      <div className=\"task-form__button-bar\">\n        <div className=\"task-form__button-bar__left\">\n          {!isNew(task) && (\n            <Button\n              label=\"Delete\"\n              color=\"red\"\n              action={() => {\n                actions.deleteTask(task.id);\n                actions.closeModal();\n              }}\n            />\n          )}\n        </div>\n        <div className=\"task-form__button-bar__right\">\n          <Button\n            label=\"Cancel\"\n            color=\"white\"\n            action={() => {\n              actions.closeModal();\n            }}\n          />\n          <Button\n            label={!isNew(task) ? 'Save' : 'Create'}\n            color=\"purple\"\n            action={this.submit}\n          />\n        </div>\n      </div>\n    );\n  }\n  render() {\n    const { task, actions } = this.props;\n\n    return (\n      <form\n        className=\"task-form\"\n        ref={ref => {\n          if (ref) {\n            this.form = ref;\n          }\n        }}\n        onSubmit={(event) => {\n          this.submit();\n          event.preventDefault();\n        }}\n      >\n        <input\n          name=\"_title\"\n          type=\"text\"\n          placeholder=\"Title\"\n          defaultValue={task.title}\n          required={true}\n        />\n        <textarea\n          name=\"description\"\n          placeholder=\"Description (optional)\"\n          defaultValue={task.description}\n        />\n        <input\n          name=\"due\"\n          type=\"date\"\n          placeholder=\"Due On\"\n          defaultValue={task.due.toISOString().substr(0, 10)}\n        />\n        {this.renderButtonBar()}\n      </form>\n    );\n  }\n}\n","import React from 'react';\n\nimport \"./modal.css\";\n\nexport type ModalProps = {\n  open: boolean;\n  title: string;\n}\n\nexport const Modal: React.SFC<ModalProps> = ({ children, open, title }) => (\n  <div className={`modal ${open ? 'open' : ''}`}>\n    <div className=\"modal__background\" />\n    <div className=\"modal__window\">\n      <h2 className=\"modal__title\">{title}</h2>\n      <div className=\"modal__body\">\n        {children}\n      </div>\n    </div>\n  </div>\n);","import React from 'react';\nimport { Task } from '../types';\nimport { TaskForm } from './task-form';\nimport { Modal, ModalProps } from './modal';\n\nimport { TaskBoardActions } from './task-board';\nimport { isNew } from '../utils';\n\nexport type TaskModalProps = {\n  task: Task;\n  open: boolean;\n  actions: TaskBoardActions;\n};\n\nexport const TaskModal: React.SFC<TaskModalProps> = ({ task, open, actions }) => (\n  <Modal title={!isNew(task) ? 'Edit Task' : 'Create Task'} open={open}>\n    {open && <TaskForm task={task} actions={actions} />}\n  </Modal>\n);\n","import React from 'react';\n\nimport { Task, TaskStatus, TaskId } from '../types';\n\nimport { Button } from './button';\nimport { TaskList } from './task-list';\nimport { TaskModal } from './task-modal';\n\nimport './task-board.css';\nimport { actions } from '../redux/actions';\n\nexport type TaskBoardActions = {\n  createOrUpdateTask: (task: Task) => any;\n  deleteTask: (id: TaskId) => any;\n  showCreateModal: (status: TaskStatus) => any;\n  showEditModal: (task: Task) => any;\n  closeModal: () => any;\n  setTaskStatus: (task: Task, status: TaskStatus) => any;\n};\n\nexport type TaskBoardProps = {\n  tasks: Task[];\n  editingTask: Task;\n  showModal?: boolean;\n  actions: TaskBoardActions;\n};\n\nconst CompletedList = ({ tasks, actions }: TaskBoardProps) => (\n  <TaskList\n    actions={actions}\n    title=\"Completed\"\n    tasks={tasks.filter(task => task.status == TaskStatus.COMPLETED)}\n  />\n);\n\nconst InProgressList = ({ tasks, actions }: TaskBoardProps) => (\n  <TaskList\n    actions={actions}\n    title=\"In Progress\"\n    tasks={tasks.filter(task => task.status == TaskStatus.IN_PROGRESS)}\n  >\n    <Button\n      label=\"Create Task\"\n      color=\"purple\"\n      action={() => {\n        actions.showCreateModal(TaskStatus.IN_PROGRESS);\n      }}\n    />\n  </TaskList>\n);\n\nconst BacklogList = ({ tasks, actions }: TaskBoardProps) => (\n  <TaskList\n    actions={actions}\n    title=\"In Progress\"\n    tasks={tasks.filter(task => task.status == TaskStatus.BACKLOG)}\n  >\n    <Button label=\"Create Task\" color=\"blue\" action={() => {\n      actions.showCreateModal(TaskStatus.BACKLOG);\n    }} />\n  </TaskList>\n);\n\nexport const TaskBoard: React.SFC<TaskBoardProps> = ({\n  tasks,\n  showModal,\n  editingTask,\n  actions,\n}) => (\n  <div className=\"board\">\n    <BacklogList tasks={tasks} actions={actions} editingTask={editingTask} />\n    <InProgressList tasks={tasks} actions={actions} editingTask={editingTask} />\n    <CompletedList tasks={tasks} actions={actions} editingTask={editingTask} />\n    <TaskModal open={showModal} task={editingTask} actions={actions} />\n  </div>\n);\n","import {connect} from 'react-redux';\n\nimport {actions} from './redux/actions';\n\nimport {TaskBoard, TaskBoardProps} from './components/task-board';\nimport { StoreShape } from './redux/types';\nimport { Dispatch, bindActionCreators } from 'redux';\n\nconst mapStateToProps = (state: StoreShape): Partial<TaskBoardProps> => ({\n  tasks: Object.values(state.tasks).filter((val) => !!val),\n  showModal: state.modalVisible,\n  editingTask: state.editTask,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): Partial<TaskBoardProps> => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(TaskBoard);\n","import {StoreShape, StandardAction, SimpleReducerMap } from \"./types\";\nimport { actionTypes } from \"./actions\";\nimport { Task, TaskStatus, TaskId } from \"../types\";\nimport { makeEmptyTask, isComplete, isNew } from \"../utils\";\n\nconst defaultState: StoreShape = {\n  tasks: {},\n  modalVisible: false,\n  editTask: {\n    title: '',\n    description: '',\n    status: TaskStatus.IN_PROGRESS,\n    due: new Date(),\n    completed: null,\n  },\n  nextTaskId: 0,\n}\n\nfunction wrapSimpleReducers(map: SimpleReducerMap) {\n  return function(state: StoreShape = defaultState, action: StandardAction<any, any>) {\n    const reducer = map[action.type];\n\n    if (reducer) {\n      return reducer(state, (action as any).payload);\n    }\n    \n    return state;\n  }\n};\n\nexport const reducer = wrapSimpleReducers({\n  [actionTypes.CreateOrUpdateTask]: (state, task: Task) => {\n    let finalTask = task;\n    let {nextTaskId} = state;\n\n    if (isNew(finalTask)) {\n      finalTask = {\n        ...finalTask,\n        id: nextTaskId++,\n      }\n    }\n\n    if (isComplete(finalTask) && !finalTask.completed) {\n      finalTask = {\n        ...finalTask,\n        completed: new Date(),\n      };\n    }\n\n    return {\n      ...state,\n      tasks: {\n        ...state.tasks,\n        [finalTask.id]: finalTask,\n      },\n      nextTaskId,\n    };\n  },\n  [actionTypes.DeleteTask]: (state, taskId: TaskId) => ({\n    ...state,\n    tasks: {\n      ...state.tasks,\n      [taskId]: null,\n    }\n  }),\n  [actionTypes.ShowCreateModal]: (state: StoreShape, status: TaskStatus) => ({\n    ...state,\n    modalVisible: true,\n    editTask: makeEmptyTask(status),\n  }),\n  [actionTypes.ShowEditModal]: (state, task: Task) => ({\n    ...state,\n    modalVisible: true,\n    editTask: task,\n  }),\n  [actionTypes.CloseModal]: (state) => ({\n    ...state,\n    modalVisible: false,\n    editTask: makeEmptyTask(),\n  })\n});\n\n","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}